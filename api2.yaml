openapi: '3.0.1'
info:
  version: '1.0.0'
  title: Events API Reference
  description: >
    # Introduction
servers:
  - url: https://d1.thales.io/events
    description: Live API
  - url: https://sandbox.d1.thales.io/events
    description: Sandbox API
security:
  - bearerAuth: []

paths:
  '/consumers/{consumerId}/events/{eventId}':
    put:
      tags:
        - Events
      summary: Event Notification
      description: This request is used by D1 to notify the bank about any event related to the consumer and all its assets.
      parameters:
        - $ref: '#/components/parameters/consumer-id-path'
        - $ref: '#/components/parameters/event-id-path'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/event'
      responses:
        '200':
          description: No Content-Type
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
components:
  parameters:
    event-id-path:
      description: The unique identifier of the event
      in: path
      name: eventId
      required: true
      schema:
        type: string
    consumer-id-path:
      description: The unique identifier of the consumer
      in: path
      name: consumerId
      required: true
      schema:
        type: string
  schemas:
    event:
      type: object
      description: The event
      discriminator:
        propertyName: type
        mapping:
          virtualCardEvent: '#/components/schemas/virtualCardEvent'
          digitalCardEvent: '#/components/schemas/digitalCardEvent'
      required:
        - type
      properties:
        type:
          type: string
          description: The event type.
          example: virtualCardEvent
    
    virtualCardEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/event'
        - type: object          
          properties:
            cardId:
              type: string
            status:
              type: string
              enum:
                - ACTIVE
                - SUSPENDED
                - DELETED
            action:
              type: string
              enum:
                - CREATE
                - ACTIVATE
                - SUSPEND
                - DELETE
                - RENEW
      required:
        - cardId
        - status
    digitalCardEvent:
      type: object
      allOf:
        - $ref: '#/components/schemas/event'
        - type: object
          properties:
            cardId:
              description: unqiue identifier of the digital card
              type: string
            originCardId:
              description: unqiue identifier of card the digital card has been created from from (funding card)
              type: string
            credentials:
              type: string
              description: 'base64 encoded of the encrypted payload of the digital card token, it contains the PAN and expiry date of the token'
            status:
              type: string
              enum:
                - ACTIVE
                - SUSPENDED
                - DELETED
            action:
              type: string
              enum:
                - CREATE
                - ACTIVATE
                - SUSPEND
                - DELETE
                - RENEW
  securitySchemes:
    bearerAuth:
      description: |-
        A JWT using the Bearer schema.
        The server checks the validity of the provided token to control access to this protected resource.
      type: http
      scheme: bearer
      bearerFormat: JWT
